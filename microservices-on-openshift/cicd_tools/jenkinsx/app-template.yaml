kind: Template
apiVersion: v1
objects:

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_LABEL}
      name: ${RESOURCE_NAME}
    name: ${RESOURCE_NAME}

- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${APP_LABEL}
      build: ${RESOURCE_NAME}
    name: ${RESOURCE_NAME}
  spec:
    source:
      type: Binary
      binary: {}
    strategy:
      type: Docker
      dockerStrategy:
    output:
      to:
        kind: ImageStreamTag
        name: ${RESOURCE_NAME}:${IMAGE_VERSION}
    runPolicy: Serial
    resources: {}
    postCommit: {}

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: ${RESOURCE_NAME}
    name: ${RESOURCE_NAME}
  spec:
    replicas: 1
    selector:
      app: ${RESOURCE_NAME}
      deploymentconfig: ${RESOURCE_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
        labels:
          app: ${RESOURCE_NAME}
          deploymentconfig: ${RESOURCE_NAME}
      spec:
        containers:
        - name: ${RESOURCE_NAME}
          env:
          - name: JENKINS_X_DOCKER_REGISTRY_SERVICE_HOST
            value: 'docker-registry.default.svc'
          - name: JENKINS_X_DOCKER_REGISTRY_SERVICE_PORT
            value: '5000'
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ${RESOURCE_NAME}
        serviceAccountName: ${RESOURCE_NAME}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${RESOURCE_NAME}
        from:
          kind: ImageStreamTag
          name: ${RESOURCE_NAME}:${IMAGE_VERSION}
      type: ImageChange

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"jenkins"}}'
    labels:
      app: ${RESOURCE_NAME}
    name: ${RESOURCE_NAME}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: ${RESOURCE_NAME}_edit
    labels:
      app: ${RESOURCE_NAME}
  subjects:
  - kind: ServiceAccount
    name: ${RESOURCE_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${RESOURCE_NAME}
    name: ${RESOURCE_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${RESOURCE_NAME}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Route
  metadata:
    annotations:
    labels:
      app: ${RESOURCE_NAME}
    name: ${RESOURCE_NAME}
  spec:
    tls:
      termination: edge
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${RESOURCE_NAME}
      weight: 100

parameters:
  - name: RESOURCE_NAME
    displayName: Resource Name
    description: The name of the build configuration resource that also matches image stream resource.
    required: true
  - name: APP_LABEL
    displayName: Application Label
    description: Name of the application label that should be used in all resources.
    required: true
  - name: DOCKER_REGISTRY
    displayName: External Docker Registry
    description: Prefix with External Docker Registry to use when tagging image, before push.
    required: true
  - name: IMAGE_VERSION
    displayName: Image Version
    description: Version of specific image to pull from external Docker registry.
    required: true
  - name: NAMESPACE
    displayName: Namespace
    description: Namespace of specific image to pull from external Docker registry.
    required: true
